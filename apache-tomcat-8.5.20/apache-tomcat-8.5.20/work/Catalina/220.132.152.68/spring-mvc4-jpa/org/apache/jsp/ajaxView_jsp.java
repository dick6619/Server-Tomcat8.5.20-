/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.20
 * Generated at: 2017-08-21 11:17:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajaxView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/apache-tomcat-8.5.20/apache-tomcat-8.5.20/webapps/spring-mvc4-jpa/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153356282000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1462109748000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	String contextPath = request.getContextPath();
    String pageEncoding = request.getCharacterEncoding();
    String charset = response.getCharacterEncoding();

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link href='");
      out.print(contextPath + "/resources/css/bootstrap.min.css");
      out.write("' rel=\"stylesheet\">\r\n");
      out.write("<link href='");
      out.print(contextPath + "/resources/css/font-awesome.min.css");
      out.write("' rel=\"stylesheet\">\r\n");
      out.write("<link href='");
      out.print(contextPath + "/resources/css/emp.css");
      out.write("' rel=\"stylesheet\">\r\n");
      out.write("<script src=\"");
      out.print(contextPath + "/resources/js/jquery-3.2.1.min.js");
      out.write("\"></script>\r\n");
      out.write("<script src=\"");
      out.print(contextPath + "/resources/js/bootstrap.min.js");
      out.write("\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t// \ttest restful ws use ajax get\r\n");
      out.write("\tfunction iiiEmps() {\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : 'restWS/getEmps2',\r\n");
      out.write("\t\t\ttype : 'GET',\r\n");
      out.write("\t\t\tdataType : 'json',\r\n");
      out.write("\t\t\tcache : false,\r\n");
      out.write("\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\t$('#body').empty();\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < data.length; i++) {\r\n");
      out.write("\t\t\t\t\t$('#body').append('<tr>' +\r\n");
      out.write("\t\t\t                   '<td>' + data[i].empno + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].ename + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].job + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].hiredate + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].sal + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].comm + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].deptVO.dname + '</td>' + \r\n");
      out.write("\t\t\t                   '</tr>')\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t// \t\t\t\t$.each(data, function() {\r\n");
      out.write("\t\t\t\t// \t\t\t\t\talert(this.empno + ',' + this.ename);\r\n");
      out.write("\t\t\t\t// \t\t\t\t});\r\n");
      out.write("\t\t\t\t// \t\t\t\t$.each(data, function(i) {\r\n");
      out.write("\t\t\t\t// \t\t\t\t\talert(data[i].ename);\r\n");
      out.write("\t\t\t\t// \t\t\t\t});\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(data) {\r\n");
      out.write("\t\t\t\talert('error!!!');\r\n");
      out.write("// \t\t\t\t$('#error').append(data.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction iiiEmp() {\r\n");
      out.write("\t\t$.get({\r\n");
      out.write("\t\t\turl : 'restWS/getEmp/' + $('#empno').val(),\r\n");
      out.write("\t\t\tdataType : 'json',\r\n");
      out.write("\t\t\tcache : false,\r\n");
      out.write("\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\t$('#body').empty();\r\n");
      out.write("\t\t\t\t$('#body').append('<tr>' +\r\n");
      out.write("\t\t\t\t                   '<td>' + data.empno + '</td>' + \r\n");
      out.write("\t\t\t\t                   '<td>' + data.ename + '</td>' + \r\n");
      out.write("\t\t\t\t                   '<td>' + data.job + '</td>' + \r\n");
      out.write("\t\t\t\t                   '<td>' + data.hiredate + '</td>' + \r\n");
      out.write("\t\t\t\t                   '<td>' + data.sal + '</td>' + \r\n");
      out.write("\t\t\t\t                   '<td>' + data.comm + '</td>' + \r\n");
      out.write("\t\t\t\t                   '<td>' + data.deptVO.dname + '</td>' + \r\n");
      out.write("\t\t\t\t                   '</tr>')\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(data) {\r\n");
      out.write("\t\t\t\talert('error!!!');\r\n");
      out.write("// \t\t\t\t$('#error').append(data.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction iiiEmpLike() {\r\n");
      out.write("\t\t$.get({\r\n");
      out.write("\t\t\turl : 'restWS/getEmpLike/' + $('#ename').val(),\r\n");
      out.write("\t\t\tdataType : 'json',\r\n");
      out.write("\t\t\tcache : false,\r\n");
      out.write("\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\t$('#body').empty();\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < data.length; i++) {\r\n");
      out.write("\t\t\t\t\t$('#body').append('<tr>' +\r\n");
      out.write("\t\t\t                   '<td>' + data[i].empno + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].ename + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].job + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].hiredate + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].sal + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].comm + '</td>' + \r\n");
      out.write("\t\t\t                   '<td>' + data[i].deptVO.dname + '</td>' + \r\n");
      out.write("\t\t\t                   '</tr>')\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(data) {\r\n");
      out.write("\t\t\t\talert('error!!!');\r\n");
      out.write("// \t\t\t\t$('#error').append(data.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction addEmp() {\r\n");
      out.write("\t\t$.post({\r\n");
      out.write("\t\t\turl : '',\r\n");
      out.write("\t\t\tdata : '',\r\n");
      out.write("\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\talert('add ok!!!');\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(data) {\r\n");
      out.write("\t\t\t\talert('add error!!!');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction updateEmp() {\r\n");
      out.write("\t\t$.put({\r\n");
      out.write("\t\t\turl : '',\r\n");
      out.write("\t\t\tdata : '',\r\n");
      out.write("\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\talert('update ok!!!');\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(data) {\r\n");
      out.write("\t\t\t\talert('update error!!!');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction deleteEmp() {\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\ttype : 'delete',\r\n");
      out.write("\t\t\turl : '',\r\n");
      out.write("\t\t\tdata : '',\r\n");
      out.write("\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\talert('delete ok!!!');\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(data) {\r\n");
      out.write("\t\t\t\talert('delete error!!!');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<input type='text' id='empno'>\r\n");
      out.write("\t<button onclick='iiiEmp()'>指定員工編號搜尋</button>\r\n");
      out.write("\t<input type='text' id='ename'>\r\n");
      out.write("\t<button onclick='iiiEmpLike()'>姓名模糊搜尋</button>\r\n");
      out.write("\t<button onclick='iiiEmps()'>所有員工</button>\r\n");
      out.write("\r\n");
      out.write("    <p id='error'>\r\n");
      out.write("\t<table class='table table-bordered' style='margin: 10px; width: 60%;'>\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>員工編號</th>\r\n");
      out.write("\t\t\t\t<th>員工姓名</th>\r\n");
      out.write("\t\t\t\t<th>職稱</th>\r\n");
      out.write("\t\t\t\t<th>任職日期</th>\r\n");
      out.write("\t\t\t\t<th>薪水</th>\r\n");
      out.write("\t\t\t\t<th>獎金</th>\r\n");
      out.write("\t\t\t\t<th>部門名稱</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody id='body'>\r\n");
      out.write("        </tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
